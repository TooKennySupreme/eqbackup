---
- name: Use DNS for host external IPv4 address
  local_action:
    module: command /usr/bin/dig +noall +short {{ item }}
  loop: "{{ groups.backup_clients }}"
  register: dns_ip

- set_fact:
    client_ipaddrs: "{{ client_ipaddrs }} + [ '{{ item.stdout.split('\n') | first }}' ]"
  loop: "{{ dns_ip.results }}"

- group:
    name: backupusers

- user:
    name: "{{ item }}"
    comment: "Backup user for {{ item }}"
    group: backupusers
    home: /
    createhome: no
  loop: "{{ groups.backup_clients }}"

- file:
    path: /home/backup
    group: backupusers
    state: directory
    mode: '0750'

- file:
    path: "/home/backup/{{ item }}"
    owner: root
    group: backupusers
    state: directory
    recurse: yes
    mode: '0750'
  loop: "{{ groups.backup_clients }}"

- file:
    path: "/home/backup/{{ item }}/.ssh"
    owner: "{{ item }}"
    group: backupusers
    state: directory
    recurse: yes
    mode: '0750'
  loop: "{{ groups.backup_clients }}"

- file:
    path: "/home/backup/{{ item }}/{{ item }}"
    owner: "{{ item }}"
    group: backupusers
    state: directory
    recurse: yes
  loop: "{{ groups.backup_clients }}"

- blockinfile:
    path: /etc/ssh/sshd_config
    block: |
      Match group backupusers
         ChrootDirectory /home/backup/%u
         AuthorizedKeysFile /home/backup/%u/.ssh/authorized_keys
         X11Forwarding no
         AllowTcpForwarding no
         ForceCommand internal-sftp
    insertafter: EOF
  notify:
    - restart SSHd

- local_action:
    module: command
    cmd: "ssh-keygen -f ssh_keys/{{ item }}.id_rsa -t rsa -b 4096 -q -N ''"
    args:
      creates: "ssh_keys/{{ item }}.id_rsa"
  become: false
  loop: "{{ groups.backup_clients }}"

- copy:
    src: "ssh_keys/{{ item }}.id_rsa.pub"
    dest: "/home/backup/{{ item }}/.ssh/authorized_keys"
    owner: "{{ item }}"
    group: backupusers
    mode: '0600'
  loop: "{{ groups.backup_clients }}"

- include: secondary.yml
