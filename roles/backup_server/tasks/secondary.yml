---
- name: Install necessary packages for backup
  apt:
    name:
      - gnupg
      - backupninja
      - duplicity
    state: present

- local_action:
    module: command
    cmd: "ssh-keygen -f ssh_keys/secondary.id_rsa -t rsa -b 4096 -q -N ''"
    args:
      creates: "ssh_keys/secondary.id_rsa"
  become: false

- file:
    path: /root/.ssh
    state: directory
    owner: root
    group: root
    mode: '0700'

- file:
    path: /var/cache/backupninja
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: install secondary backup ssh key
  copy:
    src: ssh_keys/secondary.id_rsa
    dest: /root/.ssh/id_rsa.secondary
    owner: root
    group: root
    mode: '0600'

- name: copy backup GPG key
  copy:
    src: gpg_keys/secondary.gpg
    dest: /root/gnupg.import.gpg
    owner: root
    group: root
    mode: '0600'

- shell: gpg -K "{{ gpg_keyid }}"
  register: key_installed
  ignore_errors: True

- name: import GPG key
  command: gpg --batch --import /root/gnupg.import.gpg
  when: key_installed is defined and key_installed.failed

- name: setup GPG trust
  template:
    src: owner_trust.j2
    dest: /root/owner_trust

- name: Import GPG trust
  command: gpg --import-ownertrust /root/owner_trust

- name: install duplicity job
  template:
    src: secondary.dup.j2
    dest: /etc/backup.d/secondary.dup
    mode: '0700'

- name: install backupninja conf
  template:
    src: backupninja.conf.j2
    dest: /etc/backupninja.conf
    owner: root
    group: root
    mode: '0600'

- name: add secondary server known_hosts
  known_hosts:
    path: '/root/.ssh/known_hosts'
    name: "{{ groups.backup_secondary[0] }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + groups.backup_secondary[0]) }}"
